name: Flutter CI/CD

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    if: contains(github.event.head_commit.message, 'build:') || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run flutter analyze
        run: flutter analyze || true

      - name: Run tests
        run: flutter test test/quiz_controller_test.dart

      - name: Build release APK
        run: flutter build apk --release

      - name: List APKs
        run: ls -l build/app/outputs/flutter-apk/

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Rename APK with version
        run: |
          cp build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/app-$VERSION.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-${{ env.VERSION }}.apk

      ##############################################
      # OPTION A: Versioned Release (requires bump)
      ##############################################

#      - name: Create Git tag
#        run: |
#          git config user.name "github-actions[bot]"
#          git config user.email "github-actions[bot]@users.noreply.github.com"
#          git fetch --tags
#          # Check if tag already exists to avoid errors
#          if git rev-parse ${{ env.VERSION }} >/dev/null 2>&1; then
#            echo "Tag ${{ env.VERSION }} already exists, skipping tag creation."
#          else
#            git tag ${{ env.VERSION }}
#            git push origin ${{ env.VERSION }}
#          fi
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Create GitHub Release and upload APK
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{ env.VERSION }}
#          name: Release ${{ env.VERSION }}
#          body: "Release APK version ${{ env.VERSION }}"
#          files: build/app/outputs/flutter-apk/app-${{ env.VERSION }}.apk
#        env:
#          GITHUB_TOKEN: ${{ secrets.QUIZ_TOKEN }}

      ##############################################
      # OPTION B: Always update single "Latest" release
      ##############################################
      - name: Create/Update Latest Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          name: Latest Release
          body: "This is always the latest build from main."
          files: build/app/outputs/flutter-apk/app-${{ env.VERSION }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}